#!/usr/bin/python

import sys
import re
import random
import string
import argparse
import os
import ansible.parsing.vault as vault
from ansible.parsing.vault import VaultAES256, VaultSecret

parser = argparse.ArgumentParser(description='Single Ansible Vault Var encrYpter/decrYpter')
parser.add_argument('-m', '--multi', action='store_true', help='use multiline format')
parser.add_argument('-o', '--output', help='output file')
parser.add_argument('-d', '--debug', help='print debug info')
parser.add_argument('command', help='decrypt, encrypt or edit')
parser.add_argument('filename', nargs='?', default='group_vars/all/vars.yml', help='file to work on')
args = parser.parse_args()

if 'VAULT_PASS' in os.environ:
    vault_pass=VaultSecret(os.environ['VAULT_PASS'])
else:
    raise SystemExit("please set (read -s) and export VAULT_PASS")


def randomstring(length=16):
    letters = string.ascii_lowercase + string.ascii_uppercase + string.digits
    return ''.join(random.SystemRandom().choice(letters) for i in range(length))

def encrypt(raw):
    return VaultAES256.encrypt(raw,vault_pass)
def decrypt(raw):
    return VaultAES256.decrypt(raw,vault_pass)

def print_encrypted_var(name, value,multiline):
    encrypted_value=vault.format_vaulttext_envelope(encrypt(value),'AES256')
    if not multiline:
        print(name+": !vault " +encrypted_value.replace("\n", "\\n"))
    else:
        print(name+": !vault |")
        indent=' '*10
        for line in encrypted_value.splitlines():
            print('%s%s' % (indent, line))


def encrypt_file(filename):
    with open(filename) as inp:
        lines = inp.readlines()
    cnt=0
    for line in lines:
        if args.debug:
            print("Line {}: {}".format(cnt+1, line.rstrip()))
        parts= re.split(":[ \t]*@savvy[ \t]*",line)
        if len(parts)==1:
            print line.rstrip()
        elif parts[1].startswith('generate'):
            value=randomstring()
            print_encrypted_var (parts[0], value, '')
        else:
            key=parts[0]
            value=re.sub("^:[ \t]*","",parts[1].strip(),1)
            if value.startswith('"') and value.endswith('"'):
                value=value[1:-1]
                # TODO: embedded quotes mught be escaped
            (origkey,origvalue,multiline)=decrypt_line(lines,cnt+1)
            #print "%s=%s, %s=%s" % (key, value, origkey, origvalue)
            if key!=origkey:
                print_encrypted_var(key, value, len(multiline)>0)
            elif value!=origvalue:
                print_encrypted_var(key, value, len(multiline)>0)
                # TODO do not print the next few lines
        cnt+=1

def decrypt_file(filename):
    with open(filename) as inp:
        lines = inp.readlines()
    cnt=0
    for line in lines:
        if args.debug:
            print("Line {}: {}".format(cnt+1, line.rstrip()))
        parts= re.split(":[ \t]*",line)
        if len(parts)>1:
            (key, value, multiline) = decrypt_line(lines, cnt)
            if key:
                print key+": @savvy"+multiline+": "+value
        print line.rstrip()
        cnt+=1

def decrypt_line(lines, index):
    parts= re.split(":[ \t]*",lines[index])
    if len(parts)==1:
        return (None,None,'')
    str=""
    multiline=""
    if re.search('!vault[ \t]*\|',parts[1]):
        i=index+2
        while i<len(lines) and re.search('^[ \t]*[0-9a]*[ \t]*$',lines[i]):
            str+=lines[i].strip()
            i+=1
        multiline=" multiline"
    elif parts[1].startswith('!vault'):
        match=re.search('!vault[ \t]*\$ANSIBLE_VAULT;1.1;AES256', parts[1])
        if match:
            str=parts[1][match.end():].replace('\\n','').strip()
    if len(str)>0:
        return (parts[0].strip(), decrypt(str).strip(), multiline)
    return (None,None,'')


if args.command=='encrypt':
    encrypt_file(args.filename)
elif args.command=='decrypt':
    decrypt_file(args.filename)
