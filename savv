#!/bin/env bash
# Copyright (C) 2021 Mark Hooijkaas
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>

function info()    { ${INFO-true} && printf "%s\n" "$*" || true; }
function debug()   { ${DEBUG-false} && printf "%s\n" "$*" || true; }
function error() { echo ERROR 1>&2 $*; exit 1; }

encrypt_str() {
    echo $( echo $1 | openssl aes-256-cbc -a -A -salt -pbkdf2 -pass pass:$SAVV_PASSWORD )
}

decrypt_str() {
    echo $( echo $1 | openssl aes-256-cbc -d -a -A -pbkdf2 -pass pass:$SAVV_PASSWORD )
}

generate_password() {
    if [[ -z $1 ]]; then
        length=32
    elif [[ $1 == g* ]]; then
        length=32
    else
        length=${1#@generate:}
    fi
    secret=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $length | head -n 1)
}

parse_savv_command() {
    local savv_line=$1
    local cmd=${savv_line%%:*}
    local remainder=${savv_line#*:}
    case $cmd in
        e|enc|encrypt)
            secret=$remainder
            secured=$(encrypt_str $secret)
            info "securing:   ${line/@savv:*/}@savv:encrypt:..."
            ;;
        g|gen|generate)
            generate_password $remainder
            secured=$(encrypt_str $secret)
            info "generating: ${line}"
            ;;
        orig)
            local orig=${remainder%%:*}
            local new=${remainder##*:}
            secret=${new##*:}
            if [[ $(decrypt_str $orig) == $secret ]]; then
                info "unchanged:  ${line/@savv*/}@savv:orig"
                secured=$orig
            else
                info "changed:    ${line/@savv:*/}@savv:orig"
                secured=$(encrypt_str $secret)
            fi
            ;;
        *)  # Default case nothing to do, signalled by empty secret
            unset secured
    esac
}

encrypt_file() {
    FILE=$1
    info securing $FILE
    cat $FILE | while read line; do
        #printf "%s" $line
        savv_cmd=${line#*@savv:}
        parse_savv_command $savv_cmd
        if [[ -z $secured ]]; then
            new_line=$line
        else
            # replace / in line with \/ for sed search
            line=${line//\//\\\/}
            sed -i -e "/$line/s|@savv:.*|\$(decrypt_str $secured)|" $FILE
        fi
    done
}

reverse_file() {
    FILE=$1
    info reversing $FILE
    cat $FILE | while read line; do
        if [[ ! ${line/decrypt_str} == $line ]]; then
            secured=$(encrypt_str $secret)
            secured=${line#*\$(decrypt_str }
            secured=${secured%)}
            value=$(decrypt_str $secured)
            line=${line//\//\\\/}
            sed -i -e "/$line/s|\$(decrypt_str $secured.*|@savv:orig:$secured:new:$value|" $FILE
        fi
    done
}


view_file() {
    cat $1 | while read -r line; do
        if [[ ${line/decrypt_str} == $line ]]; then
            printf "%s\n" "$line"
        else
            varname=${line%=\$(decrypt_str*}
            secured=${line#*\$(decrypt_str }
            secured=${secured%)}
            value=$(decrypt_str $secured)
            printf "%s\n" "$line" | sed  -e "s|\$(decrypt_str $secured)|@savv:encrypt:$value|"
        fi
    done
}

show_help() {
cat <<EOF
Usage: ${0##*/} [options] <file>...

The purpose of savv is working with encrypted (shell) variables
Options can be:
    -h|--help           display this help and exit
    -q|--quiet          show no informational output
    -p|--password       provide a password for encryption/decryption
    -g|--generate <len> generate a random string of provided length and exit
    -e|--encrypt        encrypt the @savv directives in the file
    -r|--reverse        reverse the encryption to view in a format to easily edit, and re-encrypt
    -v|--view           view the decrypted values in a format that can be used in scripts
       --edit           reverse, edit, and re-encrypt the file(s).

If none of the --generate, --reverse or --export options are given, the default mode is to encrypt.
In this mode single variables that are prefixed with @savv are encrypted. Examples are
    export VAR1=@savv:encrypt:secret1
    export VAR3=@savv:generate
    export VAR4=@savv:generate:64
A label of @savv:generate will generate a password of length 32
The lines will be replaced with something like:
    VAR1=\$(decrypt_str ...)

The decrypt_str is a function with the following defintion
    decrypt_str() {
        echo \$( echo $1 | openssl aes-256-cbc -d -a -A -pbkdf2 -pass pass:\$SAVV_PASSWORD )
    }
EOF
}

#command=secure_file
while [ ! $# -eq 0 ]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -q|--quiet)
            export INFO=false
            ;;
        -p|--password)
            if [[ -z ${2-} ]] ; then
                echo options --password and -p need an password as argument
                exit 1
            fi
            SAVV_PASSWORD=$2
            shift
            ;;
        -g|--generate)
            generate_password $2
            echo $secret
            exit 0
            ;;
        -e|--encrypt)
            command=encrypt_file
            ;;
        -r|--reverse)
            command=reverse_file
            ;;
        -v|--view)
            command=view_file
            ;;
        #--edit)
        #    command=edit_file
        #    ;;
        *)  # Default case: No more options, so break out of the loop.
            break
    esac
    shift
done

if [[ -z $SAVV_PASSWORD ]]; then
    echo SAVV_PASSWORD is not defined, use the --password option
    echo or the following statements to safely read it from terminal
    echo "  export SAVV_PASSWORD"
    echo "  read -s SAVV_PASSWORD"
    exit 1
elif [[ $SAVV_PASSWORD == @read ]]; then
    echo enter the password
    read -s SAVV_PASSWORD
elif [[ $SAVV_PASSWORD == @generate ]]; then
    SAVV_PASSWORD=$(generate_password)
    echo enncrypting variables with generated key $SAVV_PASSWORD
fi

if [[ -z $command ]]; then
    echo no command specified, try --encrypt, --reverse, --view or --help
    exit 1
fi

for file in $@; do
    $command $file
done
